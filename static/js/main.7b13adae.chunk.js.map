{"version":3,"sources":["RandomText.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["RandomText","props","current","previousValues","console","log","strings","filter","currString","length","indexOf","strLength","currentRandom","Math","random","floor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startValue","state","randomText","attempts","handleClick","bind","assertThisInitialized","e","preventDefault","newText","setState","concat","react_default","a","createElement","className","onClick","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAAeA,SAEf,SAAoBC,GAChB,IAAMC,EAAUD,EAAME,eACtBC,QAAQC,IAAIH,GACZ,IAAMI,EACF,CACI,SACA,SACA,OACA,OACA,QACA,WACFC,OAAO,SAACC,GAAD,OAAmC,IAAnBN,EAAQO,SAAiD,IAAjCP,EAAQQ,QAAQF,KAC/DG,EAAYL,EAAQG,OACpBG,EAAgBC,KAAKC,SAE3B,OADiBR,EAAQG,OAAS,EAAIH,EAAQO,KAAKE,MAAMH,EAAgBD,IAAc,iBCuC5EK,cAjDb,SAAAA,EAAYf,GAAO,IAAAgB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,IACN,IAAMuB,EAAaxB,EAAW,CAACG,eAAgB,KAF9B,OAGjBc,EAAKQ,MAAQ,CACXC,WAAYF,EACZrB,eAAgB,CAACqB,GACjBG,SAAU,GAEZV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARFA,2EAWPc,GAEVA,EAAEC,iBAEF,IAAMC,EAAUjC,EAAW,CAACG,eAAgBiB,KAAKK,MAAMtB,iBACvDC,QAAQC,IAAI4B,IACuC,IAAhDb,KAAKK,MAAMtB,eAAeO,QAAQuB,GACnCb,KAAKc,SAAS,SAAAT,GAAK,MAChB,CACCC,WAAYO,EACZN,SAAUF,EAAME,SAAW,KAI/BP,KAAKc,SAAS,SAAAT,GAAK,MAChB,CACCC,WAAYO,EACZ9B,eAAgBsB,EAAMtB,eAAegC,OAAOF,GAC5CN,SAAUF,EAAME,SAAW,sCAOjC,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,QAASpB,KAAKQ,YAAaa,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACpEP,EAAAC,EAAAC,cAAA,uCAC8BlB,KAAKK,MAAMC,WADzC,IACsDN,KAAKK,MAAME,mBA1CzDiB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7b13adae.chunk.js","sourcesContent":["export default RandomText;\r\n\r\nfunction RandomText(props) {\r\n    const current = props.previousValues;\r\n    console.log(current);\r\n    const strings = \r\n        [\r\n            'patata',\r\n            'potato',\r\n            'azul',\r\n            'rojo',\r\n            'verde',\r\n            'naranja'\r\n        ].filter((currString) => current.length === 0 || current.indexOf(currString) === -1);\r\n    const strLength = strings.length;\r\n    const currentRandom = Math.random();\r\n    const newValue = strings.length > 0 ? strings[Math.floor(currentRandom * strLength)] : \"No more!\";\r\n    return newValue;\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport RandomText from './RandomText';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const startValue = RandomText({previousValues: []});\r\n    this.state = {\r\n      randomText: startValue,\r\n      previousValues: [startValue],\r\n      attempts: 0\r\n    }\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    \r\n    e.preventDefault();\r\n\r\n    const newText = RandomText({previousValues: this.state.previousValues});\r\n    console.log(newText);\r\n    if(this.state.previousValues.indexOf(newText) !== -1) {\r\n      this.setState(state =>\r\n        ({\r\n          randomText: newText,\r\n          attempts: state.attempts + 1 \r\n        })\r\n      );\r\n    } else {\r\n      this.setState(state =>\r\n        ({\r\n          randomText: newText,\r\n          previousValues: state.previousValues.concat(newText),\r\n          attempts: state.attempts + 1 \r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img onClick={this.handleClick} src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            This is a spinning Winter! {this.state.randomText} {this.state.attempts}\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.1867e2a2.svg\";"],"sourceRoot":""}